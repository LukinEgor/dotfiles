set nocompatible
syntax on
filetype on
filetype indent on
filetype plugin on

let $PATH = $PATH . ':' . expand("~/.local/bin")

call plug#begin('~/.vim/plugged')

" workflow
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'jlanzarotta/bufexplorer'
Plug 'terryma/vim-multiple-cursors'

Plug 'jceb/vim-orgmode'

" tests
Plug 'janko-m/vim-test'

" search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'

" languages
Plug 'othree/html5.vim'
Plug 'digitaltoad/vim-jade'
Plug 'stephpy/vim-yaml'
Plug 'pangloss/vim-javascript'

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'

" theme
Plug 'vim-airline/vim-airline-themes'
Plug 'nanotech/jellybeans.vim'

Plug 'Shougo/vimproc.vim'
Plug 'neomake/neomake'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

Plug 'tpope/vim-dispatch'

Plug 'godlygeek/tabular'
Plug 'ervandew/supertab'
Plug 'jimenezrick/vimerl'
Plug 'tpope/vim-ragtag'
Plug 'eagletmt/ghcmod-vim'

Plug 'elzr/vim-json'
Plug 'mxw/vim-jsx'
Plug 'moll/vim-node'
Plug 'mattn/emmet-vim'

Plug 'nathanaelkane/vim-indent-guides'
Plug 'plasticboy/vim-markdown'

Plug 'tpope/vim-haml'

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'

Plug 'tpope/vim-endwise'
" Plug 'Shougo/vimshell.vim'
Plug 'Shougo/deol.nvim'


Plug 'chrisbra/csv.vim'
Plug 'ekalinin/Dockerfile.vim'

Plug 'elixir-lang/vim-elixir'
Plug 'jeetsukumaran/vim-buffergator'

call plug#end()

let mapleader = "\<Space>"

set clipboard=unnamed

nnoremap <leader>b :Buffers<CR>

" https://github.com/vim/vim/blob/master/runtime/doc/russian.txt
" Enable hotkeys for Russian layout
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
" setlocal spell spelllang=en_us,ru_ru


" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" Sets how many lines of history VIM has to remember
set history=500

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" enhanced command completion
set wildmenu

set visualbell

if has('mouse')
  set mouse=a
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw

set cursorline
set hidden
set nofoldenable
set clipboard=unnamed
set nowrap
set number
set hlsearch
set ignorecase
set smartcase

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

set autoindent
set expandtab
set softtabstop=2
set shiftwidth=2

set background=dark
set t_Co=256
colorscheme jellybeans

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_aggregate_errors = 1

let g:syntastic_check_on_wq = 0

let g:jsx_ext_required = 0

" let g:slime_target = "tmux"

let g:vim_json_syntax_conceal = 0

let g:easytags_async = 1

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

let g:buffergator_viewport_split_policy = "B"
let g:buffergator_sort_regime = "mru"

let g:vim_markdown_folding_disabled = 1

"let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
"let g:neomake_ruby_enabled_makers = ['rubocop']
"let g:neomake_json_enabled_makers = ['jsonlint']
"let g:neomake_css_enabled_makers = ['stylelint']
"let g:neomake_scss_stylelint_maker = {
"      \ 'errorformat':
"      \ '%+P%f,' .
"      \ '%*\s%l:%c  %t  %m,' .
"      \ '%-Q'
"\ }
"let g:neomake_scss_enabled_makers = ['stylelint']
"let g:neomake_html_enabled_makers = ['tidy']
"let g:neomake_haml_enabled_makers = ['hamllint']
let g:neomake_jade_enabled_makers = ['jadelint']
let g:neomake_elang_enabled_makers = ['erlc']
let g:neomake_haskell_enabled_makers = ['ghc-mod']
let g:neomake_go_enabled_makers = ['golint']
"let g:neomake_php_enabled_makers = ['php']
" let g:neomake__enabled_makers = ['']

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

:imap <C-[> <ESC>
:nmap <C-[> <ESC>

:inoremap <C-[> <Esc>
:tnoremap <C-[>  <C-\><C-n>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>

let NERDTreeIgnore = ['\.pyc$', '\.retry$']

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

nmap <silent> // :nohlsearch<CR>
noremap ,hl :set hlsearch! hlsearch?<CR>

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" Allow to copy/paste between VIM instances
" "copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>
" "copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>
" "paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>
nnoremap <silent> <bs> <C-w><Left>

let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerShowRelativePath=1
nnoremap <leader>b :BufExplorer<CR>

au BufRead,BufNewFile {Vagrantfile,Gemfile,Capfile} set ft=ruby

"autocmd Filetype php setlocal ts=4 sw=4 autoindent
autocmd! BufWritePost,BufEnter * Neomake

"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>
"nnoremap <leader>j <C-S-J>
"nnoremap <leader>k <C-S-K> nnoremap <leader>h <C-S-H>
"nnoremap <leader>l <C-S-L>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

nnoremap \ :Ag<SPACE>

map <esc> :noh<cr>

let g:airline#extensions#tabline#enabled = 1

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" Prettier
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
nmap <Leader>p <Plug>(Prettier)

"let g:prettier#autoformat = 0
"autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

"let g:prettier#config#print_width = 120
"let g:prettier#config#tab_width = 2
"let g:prettier#config#single_quote = 'true'
"let g:prettier#config#trailing_comma = 'all'

" let g:loaded_python3_provider=1

" Ultiships
if has("python3")
   command! -nargs=1 Py py3 <args>
else
    command! -nargs=1 Py py <args>
endif

let g:UltiSnipsUsePythonVersion = 3
let g:python3_host_prog = 'python'
let g:UltiSnipsSnippetDirectories = ["~/vim_snippets"]
let g:UltiSnipsEditSplit = 'vertical'
" let g:UltiSnipsExpandTrigger = "<c-h>"
" let g:UltiSnipsListSnippets = "<c-l>"

" Mapping selecting mappings
" nmap <leader>f <Plug>(Files)

nnoremap <leader>f :Files<CR>

function! DockerTransform(cmd) abort
  " return test command wrapped in docker stuff
  " return 'vagrant ssh --command '.shellescape('cd '.vagrant_project.'; '.a:cmd)
  return 'docker exec -it 12ddef427d97 bash -c '.shellescape(a:cmd)
endfunction

let g:test#custom_transformations = {'docker': function('DockerTransform')}
let g:test#transformation = 'docker'
let test#strategy = 'neovim'

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" FZF binding
nnoremap <silent> <C-p> :FZF<CR>
